
namespace SearchAlgorithms.SearchAlgorithms
{
    public static class SortSearch
    {
        /// <summary>
        /// Метод бинароного поиска для отсортированного массива (будет некорректный поиск)
        /// </summary>
        /// <param name="arr"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public static int BinarySearch(int[]arr, int value)
        {
            // возврат -1, в случае пустого элемента
            if (!arr.Any())
            {
                return -1;
            }

            // Инициализация переменных для поиска
            int m, left = 0, right = arr.Length - 1;

            // Начинаем цикл, который будет продолжаться, пока не найдём элемент или не определим, что его нет
            do
            {
                // Вычисляем индекс среднего элемента массива
                m = (left + right) / 2;

                // Если значение, которое мы ищем, больше среднего элемента,то сдвигаем левую границу поиска,
                // чтобы искать в правой половине массива
                if (value > arr[m])
                {
                    left = m + 1;
                }
                // Если значение меньше или равно среднему элементу, сдвигаем правую границу поиска
                // для поиска в левой половине массива
                else
                {
                    right = m - 1;
                }
            }
            // Цикл продолжается, пока не найдем элемент или не пересечемся: left > right
            while ((arr[m] != value) && (left <= right));

            // Если элемент найден (arr[m] == value), возвращаем его индекс
            if (arr[m] == value)
            {
                return m;
            }
            // Если элемент не найден, возвращаем -1
            else
            {
                return -1;
            }
        }
    }
}
